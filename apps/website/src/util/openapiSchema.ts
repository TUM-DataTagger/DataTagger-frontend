/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/approval_queue/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_approval_queue_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/approval_queue/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_approval_queue_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/approval_queue/{id}/approve/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_approval_queue_approve_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_auth_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/authjwtcookie/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_authjwtcookie_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/authrefresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_authrefresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/authverify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_authverify_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_cms_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cms/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_cms_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cms/slugs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_cms_slugs_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/faq/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_faq_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/faq-category/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_faq_category_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/faq-category/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_faq_category_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/faq/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_faq_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_folder_list"];
        put?: never;
        post: operations["v1_folder_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder-permission/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_folder_permission_list"];
        put?: never;
        post: operations["v1_folder_permission_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder-permission/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_folder_permission_retrieve"];
        put: operations["v1_folder_permission_update"];
        post?: never;
        delete: operations["v1_folder_permission_destroy"];
        options?: never;
        head?: never;
        patch: operations["v1_folder_permission_partial_update"];
        trace?: never;
    };
    "/api/v1/folder/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_folder_retrieve"];
        put: operations["v1_folder_update"];
        post?: never;
        delete: operations["v1_folder_destroy"];
        options?: never;
        head?: never;
        patch: operations["v1_folder_partial_update"];
        trace?: never;
    };
    "/api/v1/folder/{id}/lock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_folder_lock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder/{id}/metadata-templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_folder_metadata_templates_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder/{id}/permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["v1_folder_permissions_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_folder_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/folder/{id}/unlock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_folder_unlock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_metadata_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-field/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_field_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-field/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_field_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-template/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_template_list"];
        put?: never;
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        post: operations["v1_metadata_template_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-template-field/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_template_field_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-template-field/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_template_field_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-template/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_template_retrieve"];
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        put: operations["v1_metadata_template_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        patch: operations["v1_metadata_template_partial_update"];
        trace?: never;
    };
    "/api/v1/metadata-template/{id}/lock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        post: operations["v1_metadata_template_lock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-template/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        get: operations["v1_metadata_template_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata-template/{id}/unlock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Checks that as switch is active, or 404. Operates like the FBV decorator
         *     waffle_switch. */
        post: operations["v1_metadata_template_unlock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_metadata_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metadata/bulk-add-to-uploads-datasets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Adds metadata for multiple uploads datasets in bulk. */
        post: operations["v1_metadata_bulk_add_to_uploads_datasets_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_project_list"];
        put?: never;
        post: operations["v1_project_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project-membership/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_project_membership_list"];
        put?: never;
        post: operations["v1_project_membership_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project-membership/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_project_membership_retrieve"];
        put: operations["v1_project_membership_update"];
        post?: never;
        delete: operations["v1_project_membership_destroy"];
        options?: never;
        head?: never;
        patch: operations["v1_project_membership_partial_update"];
        trace?: never;
    };
    "/api/v1/project/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_project_retrieve"];
        put: operations["v1_project_update"];
        post?: never;
        delete: operations["v1_project_destroy"];
        options?: never;
        head?: never;
        patch: operations["v1_project_partial_update"];
        trace?: never;
    };
    "/api/v1/project/{id}/folders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List folders assigned to a project. */
        get: operations["v1_project_folders_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/{id}/lock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_project_lock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/{id}/members/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["v1_project_members_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/{id}/metadata-templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_project_metadata_templates_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_project_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project/{id}/unlock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_project_unlock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reset-backend/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_reset_backend_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reset-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description An Api View which provides a method to request a password reset token based on an e-mail address
         *
         *     Sends a signal reset_password_token_created when a reset token was created */
        post: operations["v1_reset_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reset-password/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description An Api View which provides a method to reset a password based on a unique token */
        post: operations["v1_reset_password_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reset-password/validate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description An Api View which provides a method to verify that a token is valid */
        post: operations["v1_reset_password_validate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search/global/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_search_global_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_settings_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings/{key}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_settings_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shibboleth/start/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Initiates Shibboleth authentication process */
        get: operations["v1_shibboleth_start_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/shibboleth/target/{auth_code}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Handles Shibboleth authentication callback */
        get: operations["v1_shibboleth_target_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_storage_list"];
        put?: never;
        post: operations["v1_storage_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_storage_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_dataset_list"];
        put?: never;
        post: operations["v1_uploads_dataset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{dataset_pk}/tus/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_tus_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{dataset_pk}/tus/{guid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["v1_uploads_dataset_tus_update"];
        post?: never;
        delete: operations["v1_uploads_dataset_tus_destroy"];
        options?: never;
        head?: never;
        patch: operations["v1_uploads_dataset_tus_partial_update"];
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_dataset_retrieve"];
        put: operations["v1_uploads_dataset_update"];
        post?: never;
        delete: operations["v1_uploads_dataset_destroy"];
        options?: never;
        head?: never;
        patch: operations["v1_uploads_dataset_partial_update"];
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/file/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_file_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/lock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_lock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/publish/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_publish_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/reference/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a reference to an existing file on the storage without uploading it. */
        post: operations["v1_uploads_dataset_reference_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/restore/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_restore_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_dataset_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/unlock/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_unlock_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/{id}/version/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v1_uploads_dataset_version_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/bulk-delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Deletes multiple uploads datasets in bulk. */
        post: operations["v1_uploads_dataset_bulk_delete_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-dataset/bulk-publish/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Publishes multiple uploads datasets in bulk into a folder. */
        post: operations["v1_uploads_dataset_bulk_publish_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-version/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_version_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-version-file/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_version_file_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-version/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_version_retrieve"];
        put: operations["v1_uploads_version_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["v1_uploads_version_partial_update"];
        trace?: never;
    };
    "/api/v1/uploads-version/{id}/diff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_version_diff_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-version/{id}/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Serves a file as a response to GET requests and provides file metadata for HEAD requests. */
        get: operations["v1_uploads_version_download_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads-version/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_uploads_version_status_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_user_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_user_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v1_user_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApprovalQueue: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            content_type: number;
            /** Format: date-time */
            approved_at?: string | null;
            approved_by?: number | null;
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            content_object: string;
            /** Format: date-time */
            readonly last_modification_date: string;
            readonly created_by: components["schemas"]["MinimalUser"];
            /** Format: uuid */
            object_id: string;
        };
        /**
         * @description * `APPLICATION` - Application
         *     * `SHIBBOLETH` - Shibboleth
         * @enum {string}
         */
        AuthenticationProviderEnum: "APPLICATION" | "SHIBBOLETH";
        Content: {
            /** Name of the content */
            name: string;
            /** URL slug for this content */
            slug: string;
            published?: boolean;
            readonly text_de_html: string;
            readonly text_en_html: string;
            /** Format: date-time */
            readonly creation_date: string;
            /** User who created this element */
            readonly created_by: number | null;
            /** Format: date-time */
            readonly last_modification_date: string;
            /** User who last modified this element */
            readonly last_modified_by: number | null;
        };
        ContentPageList: {
            slugs: string[];
        };
        Email: {
            /** Format: email */
            email: string;
        };
        EmailRequest: {
            /** Format: email */
            email: string;
        };
        ExtendedResetPasswordValidate: {
            status: string;
            username: string;
            /** Format: email */
            email: string;
        };
        FAQ: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            question: string;
            slug?: string;
            answer?: string | null;
            readonly category: components["schemas"]["FAQCategoryMinimal"] | null;
            order?: number;
        };
        FAQCategory: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            slug?: string;
            readonly faq: components["schemas"]["PublishedFAQList"][];
            order?: number;
        };
        FAQCategoryMinimal: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name: string;
            slug?: string;
        };
        /**
         * @description * `INTEGER` - Integer
         *     * `DECIMAL` - Decimal
         *     * `DATETIME` - Date & Time
         *     * `DATE` - Date
         *     * `TIME` - Time
         *     * `TEXT` - Text
         *     * `WYSIWYG` - WYSIWYG editor
         *     * `SELECTION` - Selection
         * @enum {string}
         */
        FieldTypeEnum: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
        Folder: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            readonly metadata_templates_count: number;
            readonly datasets_count: number;
            metadata?: components["schemas"]["MinimalMetadata"][];
            project: components["schemas"]["MinimalProjectSearch"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            storage?: string | null;
            metadata_template?: components["schemas"]["MetadataTemplate"] | null;
            readonly members_count: number;
            description?: unknown;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        FolderCreatePayloadRequest: {
            name: string;
            description?: unknown;
            /** Format: uuid */
            project?: string | null;
            /** Format: uuid */
            storage?: string | null;
            metadata_template?: string | {
                name: string;
                metadata_template_fields: {
                    field?: {
                        key: string;
                        /** @enum {string} */
                        field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                        read_only?: boolean;
                    };
                    custom_key?: string | null;
                    /** @enum {string} */
                    field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                    value?: (string | null) | (Record<string, unknown> | null);
                    mandatory?: boolean;
                }[];
            } | null;
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
            folder_users?: components["schemas"]["FolderUsersRequest"][];
        };
        FolderList: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            metadata_templates_count?: number;
            datasets_count?: number;
            project: components["schemas"]["MinimalProjectSearch"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            storage?: components["schemas"]["Storage"] | null;
            metadata_template?: components["schemas"]["MetadataTemplateMinimal"] | null;
            members_count?: number;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        FolderPermission: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            folder: string;
            readonly project_membership: components["schemas"]["ProjectMembership"];
            is_folder_admin?: boolean;
            is_metadata_template_admin?: boolean;
            can_edit?: boolean;
        };
        FolderPermissionCreateRequest: {
            /** Format: uuid */
            folder: string;
            member: string | number;
            is_folder_admin: boolean;
            is_metadata_template_admin: boolean;
            can_edit: boolean;
        };
        FolderPermissionUpdateRequest: {
            is_folder_admin: boolean;
            is_metadata_template_admin: boolean;
            can_edit: boolean;
        };
        FolderPermissionsActionPayloadRequest: {
            folder_users: components["schemas"]["FolderUsersRequest"][];
        };
        FolderSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            project: components["schemas"]["MinimalProjectSearch"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            storage: components["schemas"]["Storage"];
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        FolderUpdatePayloadRequest: {
            name: string;
            description?: unknown;
            /** Format: uuid */
            storage?: string | null;
            metadata_template?: string | {
                name: string;
                metadata_template_fields: {
                    field?: {
                        key: string;
                        /** @enum {string} */
                        field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                        read_only?: boolean;
                    };
                    custom_key?: string | null;
                    /** @enum {string} */
                    field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                    value?: (string | null) | (Record<string, unknown> | null);
                    mandatory?: boolean;
                }[];
            } | null;
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
        };
        FolderUsersRequest: {
            /** Format: email */
            email: string;
            is_folder_admin: boolean;
            is_metadata_template_admin: boolean;
            can_edit: boolean;
        };
        Group: {
            /** ID */
            readonly pk: number;
            name: string;
        };
        /** @description Serializer class used to validate a username and password.
         *
         *     'username' is identified by the custom UserModel.USERNAME_FIELD.
         *
         *     Returns a JSON Web Token that can be used to authenticate later calls. */
        JSONWebTokenRequest: {
            password: string;
            email: string;
        };
        LockStatus: {
            readonly locked: boolean;
            readonly locked_by: components["schemas"]["MinimalUser"] | null;
            /** Format: date-time */
            readonly locked_at: string | null;
        };
        Metadata: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            readonly field: components["schemas"]["MetadataField"];
            custom_key?: string | null;
            field_type?: components["schemas"]["FieldTypeEnum"];
            read_only?: boolean;
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            readonly value: string | {
                [key: string]: unknown;
            };
            config?: Record<string, unknown> | null;
            /** Format: uuid */
            metadata_template_field?: string | null;
            assigned_to_content_type?: components["schemas"]["MetadataAssignedToContentTypeEnum"];
            /** Format: uuid */
            assigned_to_object_id?: string | null;
        };
        /** @enum {string} */
        MetadataAssignedToContentTypeEnum: "folders.folder" | "projects.project" | "uploads.uploadsversion" | "uploads.uploadsversionfile";
        MetadataBulkActionRequest: {
            metadata: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
            uploads_datasets: string[];
        };
        MetadataDiffValue: {
            key: string;
            old: string | null;
            new: string | null;
        };
        MetadataField: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            key: string;
            field_type?: components["schemas"]["FieldTypeEnum"];
            read_only?: boolean;
        };
        MetadataFieldRequest: {
            key: string;
            field_type?: components["schemas"]["FieldTypeEnum"];
            read_only?: boolean;
        };
        MetadataTemplate: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /** Format: uuid */
            assigned_to_object_id?: string | null;
            assigned_to_content_type?: components["schemas"]["MetadataTemplateAssignedToContentTypeEnum"];
            readonly project: {
                /** Format: uuid */
                pk?: string;
                name?: string;
            } | null;
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
            readonly assigned_to_content_object_name: string | null;
        };
        /** @enum {string} */
        MetadataTemplateAssignedToContentTypeEnum: "folders.folder" | "projects.project";
        MetadataTemplateCreateRequest: {
            name: string;
            assigned_to_content_type?: ("folders.folder" | "projects.project") | number | null;
            /** Format: uuid */
            assigned_to_object_id?: string | null;
            metadata_template_fields?: components["schemas"]["MetadataTemplateFieldNestedRequest"][];
        };
        MetadataTemplateField: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            metadata_template: string;
            /** Format: uuid */
            field?: string | null;
            custom_key?: string | null;
            field_type?: components["schemas"]["FieldTypeEnum"];
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            readonly value: string | {
                [key: string]: unknown;
            };
            config?: unknown;
            mandatory?: boolean;
        };
        MetadataTemplateFieldNestedRequest: {
            field?: components["schemas"]["MetadataFieldRequest"];
            custom_key?: string | null;
            field_type?: components["schemas"]["FieldTypeEnum"];
            config?: unknown;
            mandatory?: boolean;
        };
        MetadataTemplateMinimal: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name: string;
        };
        MetadataTemplateUpdateRequest: {
            name: string;
            assigned_to_content_type?: ("folders.folder" | "projects.project") | number | null;
            /** Format: uuid */
            assigned_to_object_id?: string | null;
            metadata_template_fields?: components["schemas"]["MetadataTemplateFieldNestedRequest"][];
        };
        MinimalFlatUploadsVersion: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            dataset?: string | null;
        };
        MinimalFolder: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name: string;
        };
        MinimalMetadata: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            readonly field: components["schemas"]["MetadataField"];
            custom_key?: string | null;
            field_type?: components["schemas"]["FieldTypeEnum"];
            read_only?: boolean;
            /** @description Given the *incoming* primitive data, return the value for this field
             *     that should be validated and transformed to a native value. */
            readonly value: string | {
                [key: string]: unknown;
            };
            config?: unknown;
            /** Format: uuid */
            metadata_template_field?: string | null;
        };
        MinimalProjectSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        MinimalUploadsDataset: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name?: string | null;
            display_name?: string | null;
        };
        MinimalUploadsDatasetWithFolderSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            folder?: components["schemas"]["FolderSearch"] | null;
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        MinimalUploadsVersion: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name?: string | null;
            readonly version_file: components["schemas"]["MinimalUploadsVersionFile"];
            /** Format: date-time */
            readonly creation_date: string;
        };
        MinimalUploadsVersionDiff: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name?: string | null;
            /** Format: date-time */
            readonly creation_date: string;
        };
        MinimalUploadsVersionFile: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            status?: components["schemas"]["Status819Enum"];
            readonly is_published: boolean;
            /** Format: date-time */
            publication_date?: string | null;
            readonly metadata: components["schemas"]["MinimalMetadata"][];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            storage_relocating?: components["schemas"]["StorageRelocatingEnum"];
            /** Format: date-time */
            readonly last_modification_date: string;
            readonly name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
            is_referenced?: boolean;
        };
        MinimalUploadsVersionFileDiff: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            readonly name: string;
        };
        MinimalUploadsVersionFileSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: date-time */
            readonly last_modification_date: string;
            readonly name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        MinimalUploadsVersionSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            version_file: components["schemas"]["MinimalUploadsVersionFileSearch"];
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        MinimalUser: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string;
            last_name?: string;
            readonly full_name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Superuser status
             * @description Designates that this user has all permissions without explicitly assigning them.
             */
            is_superuser?: boolean;
            is_anonymized?: boolean;
        };
        PaginatedApprovalQueueList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["ApprovalQueue"][];
        };
        PaginatedFolderListList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["FolderList"][];
        };
        PaginatedMetadataFieldList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["MetadataField"][];
        };
        PaginatedMetadataTemplateFieldList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["MetadataTemplateField"][];
        };
        PaginatedMetadataTemplateList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["MetadataTemplate"][];
        };
        PaginatedProjectList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Project"][];
        };
        PaginatedStorageList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["Storage"][];
        };
        PaginatedUploadsDatasetListList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["UploadsDatasetList"][];
        };
        PaginatedUploadsVersionList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["UploadsVersion"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results?: components["schemas"]["User"][];
        };
        PasswordToken: {
            password: string;
            token: string;
        };
        PasswordTokenRequest: {
            password: string;
            token: string;
        };
        PatchedFolderPermissionUpdateRequest: {
            is_folder_admin?: boolean;
            is_metadata_template_admin?: boolean;
            can_edit?: boolean;
        };
        PatchedFolderUpdatePayloadRequest: {
            name?: string;
            description?: unknown;
            /** Format: uuid */
            storage?: string | null;
            metadata_template?: string | {
                name: string;
                metadata_template_fields: {
                    field?: {
                        key: string;
                        /** @enum {string} */
                        field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                        read_only?: boolean;
                    };
                    custom_key?: string | null;
                    /** @enum {string} */
                    field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                    value?: (string | null) | (Record<string, unknown> | null);
                    mandatory?: boolean;
                }[];
            } | null;
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
        };
        PatchedMetadataTemplateUpdateRequest: {
            name?: string;
            assigned_to_content_type?: ("folders.folder" | "projects.project") | number | null;
            /** Format: uuid */
            assigned_to_object_id?: string | null;
            metadata_template_fields?: components["schemas"]["MetadataTemplateFieldNestedRequest"][];
        };
        PatchedProjectMembershipUpdateRequest: {
            is_project_admin?: boolean;
            can_create_folders?: boolean;
            is_metadata_template_admin?: boolean;
        };
        PatchedProjectUpdatePayloadRequest: {
            name?: string;
            description?: unknown;
            metadata_template?: string | {
                name: string;
                metadata_template_fields: {
                    field?: {
                        key: string;
                        /** @enum {string} */
                        field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                        read_only?: boolean;
                    };
                    custom_key?: string | null;
                    /** @enum {string} */
                    field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                    value?: (string | null) | (Record<string, unknown> | null);
                    mandatory?: boolean;
                }[];
            } | null;
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
        };
        PatchedUploadRequest: {
            /** Format: uuid */
            guid?: string;
            state?: string;
            /** Format: int64 */
            upload_offset?: number;
            /** Format: int64 */
            upload_length?: number;
            upload_metadata?: string;
            filename?: string;
            temporary_file_path?: string | null;
            /** Format: date-time */
            expires?: string | null;
            /** Format: binary */
            uploaded_file?: string | null;
            /** Format: uuid */
            dataset?: string | null;
        };
        PatchedUploadsDatasetUpdatePayloadRequest: {
            name?: string | null;
        };
        PatchedUploadsVersionPayloadRequest: {
            name?: string | null;
            status?: components["schemas"]["UploadsVersionPayloadStatusEnum"];
        };
        Project: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly folders_count: number;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            readonly metadata_templates_count: number;
            metadata?: components["schemas"]["MinimalMetadata"][];
            readonly folders: components["schemas"]["MinimalFolder"][];
            readonly members_count: number;
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            metadata_template?: components["schemas"]["MetadataTemplate"] | null;
            readonly is_deletable: boolean;
            description?: unknown;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        ProjectCreatePayloadRequest: {
            name: string;
            description?: unknown;
            folder_name?: string | null;
            project_users?: components["schemas"]["ProjectUsersWithFolderPermissionsRequest"][];
            metadata_template?: string | {
                name: string;
                metadata_template_fields: {
                    field?: {
                        key: string;
                        /** @enum {string} */
                        field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                        read_only?: boolean;
                    };
                    custom_key?: string | null;
                    /** @enum {string} */
                    field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                    value?: (string | null) | (Record<string, unknown> | null);
                    mandatory?: boolean;
                }[];
            } | null;
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
        };
        ProjectMembersActionPayloadRequest: {
            project_users: components["schemas"]["ProjectUsersRequest"][];
        };
        ProjectMembership: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: uuid */
            project: string;
            readonly member: components["schemas"]["MinimalUser"];
            is_project_admin?: boolean;
            can_create_folders?: boolean;
            is_metadata_template_admin?: boolean;
        };
        ProjectMembershipCreateRequest: {
            /** Format: uuid */
            project: string;
            member: string | number;
            is_project_admin?: boolean;
            can_create_folders?: boolean;
            is_metadata_template_admin?: boolean;
        };
        ProjectMembershipUpdateRequest: {
            is_project_admin?: boolean;
            can_create_folders?: boolean;
            is_metadata_template_admin?: boolean;
        };
        ProjectSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        ProjectUpdatePayloadRequest: {
            name: string;
            description?: unknown;
            metadata_template?: string | {
                name: string;
                metadata_template_fields: {
                    field?: {
                        key: string;
                        /** @enum {string} */
                        field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                        read_only?: boolean;
                    };
                    custom_key?: string | null;
                    /** @enum {string} */
                    field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                    value?: (string | null) | (Record<string, unknown> | null);
                    mandatory?: boolean;
                }[];
            } | null;
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
        };
        ProjectUsersRequest: {
            /** Format: email */
            email: string;
            is_project_admin: boolean;
            is_metadata_template_admin: boolean;
            can_create_folders: boolean;
        };
        ProjectUsersWithFolderPermissionsRequest: {
            /** Format: email */
            email: string;
            is_project_admin: boolean;
            is_project_metadata_template_admin: boolean;
            can_create_folders: boolean;
            is_folder_admin: boolean;
            is_folder_metadata_template_admin: boolean;
            can_edit_folder: boolean;
            can_view_folder: boolean;
        };
        PublishedFAQList: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            question: string;
            slug?: string;
            answer?: string | null;
            order?: number;
        };
        /** @description Serializer used for refreshing JWTs. */
        RefreshAuthTokenRequest: {
            token: string;
        };
        ResetTokenRequest: {
            token: string;
        };
        Search: {
            projects: components["schemas"]["ProjectSearch"][];
            folders: components["schemas"]["FolderSearch"][];
            uploads_datasets: components["schemas"]["UploadsDatasetSearch"][];
            uploads_versions: components["schemas"]["UploadsVersionSearch"][];
        };
        Settings: {
            key: string;
            value?: string | null;
            description?: string | null;
            public?: boolean;
        };
        ShibbolethStart: {
            /** Format: uri */
            shibboleth_login_url: string;
            auth_code: string;
        };
        /**
         * @description * `SCHEDULED` - Scheduled
         *     * `PROCESSED` - Processed
         *     * `IN_PROGRESS` - In progress
         *     * `ERROR` - Error
         *     * `FINISHED` - Finished
         * @enum {string}
         */
        Status819Enum: "SCHEDULED" | "PROCESSED" | "IN_PROGRESS" | "ERROR" | "FINISHED";
        Storage: {
            /** Format: date-time */
            readonly creation_date: string;
            /** @description Type of storage provider
             *
             *     * `default_local` - Default Local Storage
             *     * `private_dss` - Private DSS Storage */
            storage_type?: components["schemas"]["StorageTypeEnum"];
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            default?: boolean;
            local_private_dss_path: string;
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            description?: unknown;
            /** Format: date-time */
            readonly last_modification_date: string;
            name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        StorageCreatePayloadRequest: {
            name: string;
            description?: unknown;
            storage_type: string;
            local_private_dss_path: string;
        };
        /**
         * @description * `SCHEDULED` - Scheduled
         *     * `PROCESSED` - Processed
         *     * `IN_PROGRESS` - In progress
         *     * `ERROR` - Error
         *     * `FINISHED` - Finished
         * @enum {string}
         */
        StorageRelocatingEnum: "SCHEDULED" | "PROCESSED" | "IN_PROGRESS" | "ERROR" | "FINISHED";
        /**
         * @description * `default_local` - Default Local Storage
         *     * `private_dss` - Private DSS Storage
         * @enum {string}
         */
        StorageTypeEnum: "default_local" | "private_dss";
        /** @description Used only for OpenAPI generator */
        TokenResponse: {
            readonly token: string;
            readonly user: components["schemas"]["UserResponse"];
        };
        Upload: {
            readonly id: number;
            /** Format: uuid */
            guid?: string;
            state?: string;
            /** Format: int64 */
            upload_offset?: number;
            /** Format: int64 */
            upload_length?: number;
            upload_metadata: string;
            filename?: string;
            temporary_file_path?: string | null;
            /** Format: date-time */
            expires?: string | null;
            /** Format: uri */
            uploaded_file?: string | null;
            /** Format: uuid */
            dataset?: string | null;
            /** User who uploaded this file */
            readonly user: number | null;
        };
        UploadRequest: {
            /** Format: uuid */
            guid?: string;
            state?: string;
            /** Format: int64 */
            upload_offset?: number;
            /** Format: int64 */
            upload_length?: number;
            upload_metadata: string;
            filename?: string;
            temporary_file_path?: string | null;
            /** Format: date-time */
            expires?: string | null;
            /** Format: binary */
            uploaded_file?: string | null;
            /** Format: uuid */
            dataset?: string | null;
        };
        UploadsDataset: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            readonly is_published: boolean;
            /** Format: date-time */
            publication_date?: string | null;
            /** Format: date-time */
            expiry_date?: string | null;
            readonly uploads_versions: components["schemas"]["UploadsVersionsForUploadsDataset"][];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            display_name?: string | null;
            folder?: components["schemas"]["Folder"] | null;
            latest_version?: components["schemas"]["MinimalUploadsVersion"] | null;
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
            readonly is_expired: boolean;
        };
        UploadsDatasetBulkDelete: {
            success: string[];
            error: string[];
        };
        UploadsDatasetBulkDeleteActionRequest: {
            uploads_datasets: string[];
        };
        UploadsDatasetBulkPublishActionRequest: {
            uploads_datasets: string[];
            /** Format: uuid */
            folder: string;
        };
        UploadsDatasetCreatePayloadRequest: {
            name?: string | null;
            /** Format: uuid */
            folder?: string | null;
        };
        UploadsDatasetFileActionRequest: {
            /** Format: binary */
            file: string;
        };
        UploadsDatasetList: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            readonly is_published: boolean;
            /** Format: date-time */
            publication_date?: string | null;
            /** Format: date-time */
            expiry_date?: string | null;
            readonly uploads_versions: components["schemas"]["UploadsVersionsForUploadsDataset"][];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            display_name?: string | null;
            folder?: components["schemas"]["FolderSearch"] | null;
            latest_version?: components["schemas"]["MinimalUploadsVersion"] | null;
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
            readonly is_expired: boolean;
        };
        UploadsDatasetPublishActionRequest: {
            /** Format: uuid */
            folder?: string;
        };
        UploadsDatasetRestoreUploadsVersionActionRequest: {
            /** Format: uuid */
            uploads_version: string;
        };
        UploadsDatasetSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            display_name?: string | null;
            folder?: components["schemas"]["FolderSearch"] | null;
            latest_version?: components["schemas"]["MinimalUploadsVersionSearch"] | null;
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        UploadsDatasetUpdatePayloadRequest: {
            name?: string | null;
        };
        UploadsDatasetVersionActionPayloadRequest: {
            metadata?: {
                field?: {
                    key: string;
                    /** @enum {string} */
                    field_type: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                } | (string | null);
                custom_key?: string | null;
                /** @enum {string} */
                field_type?: "INTEGER" | "DECIMAL" | "DATETIME" | "DATE" | "TIME" | "TEXT" | "WYSIWYG" | "SELECTION";
                value?: (string | null) | (Record<string, unknown> | null);
                config?: Record<string, unknown> | null;
                /** Format: uuid */
                metadata_template_field?: string | null;
            }[];
        };
        UploadsVersion: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            readonly is_published: boolean;
            /** Format: date-time */
            publication_date?: string | null;
            status?: components["schemas"]["UploadsVersionStatusEnum"];
            metadata?: components["schemas"]["MinimalMetadata"][];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            metadata_is_complete?: boolean;
            readonly version_file: components["schemas"]["MinimalUploadsVersionFile"];
            readonly dataset: components["schemas"]["MinimalUploadsDataset"];
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        UploadsVersionDiff: {
            old: components["schemas"]["MinimalUploadsVersionDiff"];
            new: components["schemas"]["MinimalUploadsVersionDiff"];
        };
        UploadsVersionDiffResponse: {
            readonly metadata: components["schemas"]["MetadataDiffValue"][];
            version_file?: components["schemas"]["UploadsVersionFileDiff"];
            version: components["schemas"]["UploadsVersionDiff"];
        };
        UploadsVersionFile: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            status?: components["schemas"]["Status819Enum"];
            readonly is_published: boolean;
            /** Format: date-time */
            publication_date?: string | null;
            readonly metadata: components["schemas"]["MinimalMetadata"][];
            readonly uploads_versions: components["schemas"]["MinimalFlatUploadsVersion"][];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            storage_relocating?: components["schemas"]["StorageRelocatingEnum"];
            /** Format: date-time */
            readonly last_modification_date: string;
            readonly name: string;
            readonly created_by: components["schemas"]["MinimalUser"];
            is_referenced?: boolean;
        };
        UploadsVersionFileDiff: {
            old: components["schemas"]["MinimalUploadsVersionFileDiff"];
            new: components["schemas"]["MinimalUploadsVersionFileDiff"];
        };
        UploadsVersionPayloadRequest: {
            name?: string | null;
            status?: components["schemas"]["UploadsVersionPayloadStatusEnum"];
        };
        /** @enum {string} */
        UploadsVersionPayloadStatusEnum: "SCHEDULED" | "IN_PROGRESS" | "ERROR" | "FINISHED";
        UploadsVersionSearch: {
            /** Format: date-time */
            readonly creation_date: string;
            readonly last_modified_by: components["schemas"]["MinimalUser"];
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            version_file: components["schemas"]["MinimalUploadsVersionFileSearch"];
            dataset: components["schemas"]["MinimalUploadsDatasetWithFolderSearch"];
            /** Format: date-time */
            readonly last_modification_date: string;
            name?: string | null;
            readonly created_by: components["schemas"]["MinimalUser"];
        };
        /**
         * @description * `SCHEDULED` - Scheduled
         *     * `IN_PROGRESS` - In progress
         *     * `ERROR` - Error
         *     * `FINISHED` - Finished
         * @enum {string}
         */
        UploadsVersionStatusEnum: "SCHEDULED" | "IN_PROGRESS" | "ERROR" | "FINISHED";
        UploadsVersionsForUploadsDataset: {
            /**
             * Id
             * Format: uuid
             */
            readonly pk: string;
            name?: string | null;
            /** Format: date-time */
            readonly creation_date: string;
            readonly is_published: boolean;
            /** Format: date-time */
            publication_date?: string | null;
        };
        User: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string;
            last_name?: string;
            readonly full_name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Superuser status
             * @description Designates that this user has all permissions without explicitly assigning them.
             */
            is_superuser?: boolean;
            is_anonymized?: boolean;
            readonly groups: components["schemas"]["Group"][];
            readonly permissions: string[];
            can_create_projects?: boolean;
            can_hard_delete_datasets?: boolean;
            is_global_metadata_template_admin?: boolean;
            is_global_approval_queue_admin?: boolean;
            authentication_provider?: components["schemas"]["AuthenticationProviderEnum"];
            given_name?: string | null;
            sn?: string | null;
            edu_person_affiliation?: string | null;
            im_org_zug_mitarbeiter?: string | null;
            im_org_zug_gast?: string | null;
            im_org_zug_student?: string | null;
            im_akademischer_grad?: string | null;
            im_titel_anrede?: string | null;
            im_titel_pre?: string | null;
            im_titel_post?: string | null;
        };
        /** @description Used only for OpenAPI generator */
        UserResponse: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            email: string;
            first_name?: string;
            last_name?: string;
            readonly full_name: string;
            /**
             * Active
             * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
             */
            is_active?: boolean;
            /**
             * Superuser status
             * @description Designates that this user has all permissions without explicitly assigning them.
             */
            is_superuser?: boolean;
            is_anonymized?: boolean;
            readonly groups: components["schemas"]["Group"][];
            readonly permissions: string[];
            can_create_projects?: boolean;
            can_hard_delete_datasets?: boolean;
            is_global_metadata_template_admin?: boolean;
            is_global_approval_queue_admin?: boolean;
            authentication_provider?: components["schemas"]["AuthenticationProviderEnum"];
            given_name?: string | null;
            sn?: string | null;
            edu_person_affiliation?: string | null;
            im_org_zug_mitarbeiter?: string | null;
            im_org_zug_gast?: string | null;
            im_org_zug_student?: string | null;
            im_akademischer_grad?: string | null;
            im_titel_anrede?: string | null;
            im_titel_pre?: string | null;
            im_titel_post?: string | null;
        };
        /** @description Serializer used for verifying JWTs. */
        VerifyAuthTokenRequest: {
            token: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "en";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v1_approval_queue_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedApprovalQueueList"];
                };
            };
        };
    };
    v1_approval_queue_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Approval Queue Item. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalQueue"];
                };
            };
        };
    };
    v1_approval_queue_approve_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Approval Queue Item. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalQueue"];
                };
            };
        };
    };
    v1_auth_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JSONWebTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["JSONWebTokenRequest"];
                "multipart/form-data": components["schemas"]["JSONWebTokenRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    v1_authjwtcookie_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    v1_authrefresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshAuthTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RefreshAuthTokenRequest"];
                "multipart/form-data": components["schemas"]["RefreshAuthTokenRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    v1_authverify_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyAuthTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyAuthTokenRequest"];
                "multipart/form-data": components["schemas"]["VerifyAuthTokenRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    v1_cms_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Content"][];
                };
            };
        };
    };
    v1_cms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Content"];
                };
            };
        };
    };
    v1_cms_slugs_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentPageList"];
                };
            };
        };
    };
    v1_faq_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FAQ"][];
                };
            };
        };
    };
    v1_faq_category_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FAQCategory"][];
                };
            };
        };
    };
    v1_faq_category_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this faq category. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FAQCategory"];
                };
            };
        };
    };
    v1_faq_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this faq. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FAQ"];
                };
            };
        };
    };
    v1_folder_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                metadata_template?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                project?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedFolderListList"];
                };
            };
        };
    };
    v1_folder_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderCreatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FolderCreatePayloadRequest"];
                "multipart/form-data": components["schemas"]["FolderCreatePayloadRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Folder"];
                };
            };
        };
    };
    v1_folder_permission_list: {
        parameters: {
            query?: {
                folder?: string;
                /** @description Filter by member */
                project_membership__member?: number;
                project_membership__member__email?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderPermission"][];
                };
            };
        };
    };
    v1_folder_permission_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderPermissionCreateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FolderPermissionCreateRequest"];
                "multipart/form-data": components["schemas"]["FolderPermissionCreateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderPermission"];
                };
            };
        };
    };
    v1_folder_permission_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder permission. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderPermission"];
                };
            };
        };
    };
    v1_folder_permission_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder permission. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderPermissionUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FolderPermissionUpdateRequest"];
                "multipart/form-data": components["schemas"]["FolderPermissionUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderPermission"];
                };
            };
        };
    };
    v1_folder_permission_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder permission. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_folder_permission_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder permission. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFolderPermissionUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedFolderPermissionUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedFolderPermissionUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderPermission"];
                };
            };
        };
    };
    v1_folder_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Folder"];
                };
            };
        };
    };
    v1_folder_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderUpdatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FolderUpdatePayloadRequest"];
                "multipart/form-data": components["schemas"]["FolderUpdatePayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Folder"];
                };
            };
        };
    };
    v1_folder_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_folder_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFolderUpdatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedFolderUpdatePayloadRequest"];
                "multipart/form-data": components["schemas"]["PatchedFolderUpdatePayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Folder"];
                };
            };
        };
    };
    v1_folder_lock_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_folder_metadata_templates_list: {
        parameters: {
            query?: {
                metadata_template?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                project?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplate"][];
                };
            };
        };
    };
    v1_folder_permissions_update: {
        parameters: {
            query?: {
                metadata_template?: string;
                project?: string;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderPermissionsActionPayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["FolderPermissionsActionPayloadRequest"];
                "multipart/form-data": components["schemas"]["FolderPermissionsActionPayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderPermission"][];
                };
            };
        };
    };
    v1_folder_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_folder_unlock_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_metadata_list: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project" | "uploads.uploadsversion" | "uploads.uploadsversionfile";
                assigned_to_object_id?: string;
                limit?: number;
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metadata"][];
                };
            };
        };
    };
    v1_metadata_field_list: {
        parameters: {
            query?: {
                /** @description * `INTEGER` - Integer
                 *     * `DECIMAL` - Decimal
                 *     * `DATETIME` - Date & Time
                 *     * `DATE` - Date
                 *     * `TIME` - Time
                 *     * `TEXT` - Text
                 *     * `WYSIWYG` - WYSIWYG editor
                 *     * `SELECTION` - Selection */
                field_type?: "DATE" | "DATETIME" | "DECIMAL" | "INTEGER" | "SELECTION" | "TEXT" | "TIME" | "WYSIWYG";
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                read_only?: boolean;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMetadataFieldList"];
                };
            };
        };
    };
    v1_metadata_field_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata field. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataField"];
                };
            };
        };
    };
    v1_metadata_template_list: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project" | "uploads.uploadsversion" | "uploads.uploadsversionfile";
                assigned_to_object_id?: string;
                limit?: number;
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMetadataTemplateList"];
                };
            };
        };
    };
    v1_metadata_template_create: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetadataTemplateCreateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MetadataTemplateCreateRequest"];
                "multipart/form-data": components["schemas"]["MetadataTemplateCreateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplate"];
                };
            };
        };
    };
    v1_metadata_template_field_list: {
        parameters: {
            query?: {
                field?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                metadata_template?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMetadataTemplateFieldList"];
                };
            };
        };
    };
    v1_metadata_template_field_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template field. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplateField"];
                };
            };
        };
    };
    v1_metadata_template_retrieve: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplate"];
                };
            };
        };
    };
    v1_metadata_template_update: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetadataTemplateUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MetadataTemplateUpdateRequest"];
                "multipart/form-data": components["schemas"]["MetadataTemplateUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplate"];
                };
            };
        };
    };
    v1_metadata_template_partial_update: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMetadataTemplateUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMetadataTemplateUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedMetadataTemplateUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplate"];
                };
            };
        };
    };
    v1_metadata_template_lock_create: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_metadata_template_status_retrieve: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_metadata_template_unlock_create: {
        parameters: {
            query?: {
                assigned_to_content_type?: "folders.folder" | "projects.project";
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata template. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_metadata_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this metadata. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metadata"];
                };
            };
        };
    };
    v1_metadata_bulk_add_to_uploads_datasets_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetadataBulkActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MetadataBulkActionRequest"];
                "multipart/form-data": components["schemas"]["MetadataBulkActionRequest"];
            };
        };
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_project_list: {
        parameters: {
            query?: {
                created_by?: "me" | "others";
                is_deletable?: boolean;
                limit?: number;
                membership?: "admin" | "member";
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProjectList"];
                };
            };
        };
    };
    v1_project_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectCreatePayloadRequest"];
                "multipart/form-data": components["schemas"]["ProjectCreatePayloadRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    v1_project_membership_list: {
        parameters: {
            query?: {
                /** @description Filter by member */
                member?: number;
                member__email?: string;
                project?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMembership"][];
                };
            };
        };
    };
    v1_project_membership_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMembershipCreateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectMembershipCreateRequest"];
                "multipart/form-data": components["schemas"]["ProjectMembershipCreateRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMembership"];
                };
            };
        };
    };
    v1_project_membership_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project membership. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMembership"];
                };
            };
        };
    };
    v1_project_membership_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project membership. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProjectMembershipUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectMembershipUpdateRequest"];
                "multipart/form-data": components["schemas"]["ProjectMembershipUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMembership"];
                };
            };
        };
    };
    v1_project_membership_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project membership. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_project_membership_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project membership. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProjectMembershipUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectMembershipUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedProjectMembershipUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMembership"];
                };
            };
        };
    };
    v1_project_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    v1_project_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectUpdatePayloadRequest"];
                "multipart/form-data": components["schemas"]["ProjectUpdatePayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    v1_project_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_project_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProjectUpdatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProjectUpdatePayloadRequest"];
                "multipart/form-data": components["schemas"]["PatchedProjectUpdatePayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    v1_project_folders_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FolderList"][];
                };
            };
        };
    };
    v1_project_lock_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_project_members_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectMembersActionPayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProjectMembersActionPayloadRequest"];
                "multipart/form-data": components["schemas"]["ProjectMembersActionPayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMembership"][];
                };
            };
        };
    };
    v1_project_metadata_templates_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataTemplate"][];
                };
            };
        };
    };
    v1_project_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_project_unlock_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this project. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_reset_backend_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_reset_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EmailRequest"];
                "multipart/form-data": components["schemas"]["EmailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Email"];
                };
            };
        };
    };
    v1_reset_password_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordTokenRequest"];
                "multipart/form-data": components["schemas"]["PasswordTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordToken"];
                };
            };
        };
    };
    v1_reset_password_validate_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ResetTokenRequest"];
                "multipart/form-data": components["schemas"]["ResetTokenRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtendedResetPasswordValidate"];
                };
            };
        };
    };
    v1_search_global_retrieve: {
        parameters: {
            query?: {
                content_types?: ("folders.folder" | "projects.project" | "uploads.uploadsversion" | "uploads.uploadsversionfile")[];
                limit?: number;
                term?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Search"];
                };
            };
        };
    };
    v1_settings_list: {
        parameters: {
            query?: {
                key?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"][];
                };
            };
        };
    };
    v1_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this setting. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
        };
    };
    v1_shibboleth_start_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShibbolethStart"];
                };
            };
        };
    };
    v1_shibboleth_target_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                auth_code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No response body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_storage_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedStorageList"];
                };
            };
        };
    };
    v1_storage_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorageCreatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["StorageCreatePayloadRequest"];
                "multipart/form-data": components["schemas"]["StorageCreatePayloadRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"];
                };
            };
        };
    };
    v1_storage_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Storage. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"];
                };
            };
        };
    };
    v1_uploads_dataset_list: {
        parameters: {
            query?: {
                created_by?: number;
                folder?: string;
                last_modified_by?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUploadsDatasetListList"];
                };
            };
        };
    };
    v1_uploads_dataset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetCreatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetCreatePayloadRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetCreatePayloadRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDataset"];
                };
            };
        };
    };
    v1_uploads_dataset_tus_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_pk: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/offset+octet-stream": components["schemas"]["UploadRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Upload"];
                };
            };
        };
    };
    v1_uploads_dataset_tus_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_pk: string;
                guid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/offset+octet-stream": components["schemas"]["UploadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Upload"];
                };
            };
        };
    };
    v1_uploads_dataset_tus_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_pk: string;
                guid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_uploads_dataset_tus_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_pk: string;
                guid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/offset+octet-stream": components["schemas"]["PatchedUploadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Upload"];
                };
            };
        };
    };
    v1_uploads_dataset_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDataset"];
                };
            };
        };
    };
    v1_uploads_dataset_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetUpdatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetUpdatePayloadRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetUpdatePayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDataset"];
                };
            };
        };
    };
    v1_uploads_dataset_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_uploads_dataset_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUploadsDatasetUpdatePayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUploadsDatasetUpdatePayloadRequest"];
                "multipart/form-data": components["schemas"]["PatchedUploadsDatasetUpdatePayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDataset"];
                };
            };
        };
    };
    v1_uploads_dataset_file_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetFileActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetFileActionRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetFileActionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_dataset_lock_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_uploads_dataset_publish_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetPublishActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetPublishActionRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetPublishActionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDataset"];
                };
            };
        };
    };
    v1_uploads_dataset_reference_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Path to an existing file on the storage that should be referenced. */
                    filepath: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDataset"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v1_uploads_dataset_restore_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetRestoreUploadsVersionActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetRestoreUploadsVersionActionRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetRestoreUploadsVersionActionRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_dataset_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_uploads_dataset_unlock_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_uploads_dataset_version_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads dataset. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetVersionActionPayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetVersionActionPayloadRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetVersionActionPayloadRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_dataset_bulk_delete_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetBulkDeleteActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetBulkDeleteActionRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetBulkDeleteActionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsDatasetBulkDelete"];
                };
            };
        };
    };
    v1_uploads_dataset_bulk_publish_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadsDatasetBulkPublishActionRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsDatasetBulkPublishActionRequest"];
                "multipart/form-data": components["schemas"]["UploadsDatasetBulkPublishActionRequest"];
            };
        };
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v1_uploads_version_list: {
        parameters: {
            query?: {
                created_by?: number;
                dataset?: string;
                dataset__folder?: string;
                last_modified_by?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                version_file?: string;
                /** @description * `SCHEDULED` - Scheduled
                 *     * `PROCESSED` - Processed
                 *     * `IN_PROGRESS` - In progress
                 *     * `ERROR` - Error
                 *     * `FINISHED` - Finished */
                version_file__status?: "ERROR" | "FINISHED" | "IN_PROGRESS" | "PROCESSED" | "SCHEDULED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUploadsVersionList"];
                };
            };
        };
    };
    v1_uploads_version_file_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version file. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersionFile"];
                };
            };
        };
    };
    v1_uploads_version_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_version_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadsVersionPayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UploadsVersionPayloadRequest"];
                "multipart/form-data": components["schemas"]["UploadsVersionPayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_version_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUploadsVersionPayloadRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUploadsVersionPayloadRequest"];
                "multipart/form-data": components["schemas"]["PatchedUploadsVersionPayloadRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_version_diff_retrieve: {
        parameters: {
            query: {
                /** @description UUID of the UploadsVersion to compare with */
                compare: string;
            };
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersionDiffResponse"];
                };
            };
        };
    };
    v1_uploads_version_download_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadsVersion"];
                };
            };
        };
    };
    v1_uploads_version_status_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this uploads version. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LockStatus"];
                };
            };
        };
    };
    v1_user_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                username?: string;
                username__icontains?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    v1_user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    v1_user_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
